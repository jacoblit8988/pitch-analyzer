<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pitch Analyzer</title>
</head>
<body>
    <h1>Pitch Analyzer</h1>
    <button id="startRecording">Start Recording</button>
    <button id="stopRecording" disabled>Stop Recording</button>
    <p id="pitchResult">Detected Pitch: N/A</p>
    
    <script>
        let audioContext;
        let analyser;
        let microphone;
        let scriptProcessor;

        document.getElementById('startRecording').addEventListener('click', async () => {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            analyser.fftSize = 2048;

            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            microphone = audioContext.createMediaStreamSource(stream);
            scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);

            microphone.connect(analyser);
            analyser.connect(scriptProcessor);
            scriptProcessor.connect(audioContext.destination);
            scriptProcessor.onaudioprocess = detectPitch;

            document.getElementById('startRecording').disabled = true;
            document.getElementById('stopRecording').disabled = false;
        });

        document.getElementById('stopRecording').addEventListener('click', () => {
            audioContext.close();
            document.getElementById('startRecording').disabled = false;
            document.getElementById('stopRecording').disabled = true;
        });

        function detectPitch(event) {
            let buffer = event.inputBuffer.getChannelData(0);
            let maxVal = Math.max(...buffer.map(Math.abs));

            if (maxVal > 0.01) {
                let dominantFreq = estimatePitch(buffer, audioContext.sampleRate);
                document.getElementById('pitchResult').innerText = `Detected Pitch: ${dominantFreq.toFixed(2)} Hz`;
            }
        }

        function estimatePitch(buffer, sampleRate) {
            let sum = 0;
            for (let i = 0; i < buffer.length; i++) {
                sum += buffer[i] * buffer[i];
            }
            let rms = Math.sqrt(sum / buffer.length);
            return rms * sampleRate;  // Placeholder: Replace with FFT-based pitch detection
        }
    </script>
</body>
</html>
